import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import Sidebar from '../../components/sidebar'
import SortableTable from "../../components/sortableTable";
import HeaderButton from '../../components/headerButton';
import React, { useState } from "react";
import DraggableTable from "../../components/draggableTable2"
import DonutProgress from "../../components/donutProgress2";
import Counter from "../../components/counter";
import { CircularProgressbar, buildStyles } from 'react-circular-progressbar';
import 'react-circular-progressbar/dist/styles.css';
import AnimatedProgressProvider from '../../components/AnimatedProgressProvider';
import { easeQuadInOut } from "d3-ease";
import AreaChart from "../../components/d3AreaGraph";
import LineGraph from '../../components/d3LineGraph';
import ScatterGraph from '../../components/d3ScatterGraph';
import DropdownMenu from '../../components/dropdownMenu';
import { Item, useSelectState } from 'react-stately';

const Test: NextPage = () => {

    const [layout, setLayout] = useState('table');

    const handleLayoutChange = () => {
        if (layout === 'table') {
            setLayout('grid');
        } else {
            setLayout('table');
        }
    };

    const tableData2 = [
        {1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,10:10,11:11,12:12,13:13,14:1400000,1500000:15},
        {1:2,2:3,3:4,4:5,5:6,6:7,7:8,8:9,9:10,10:11,11:12,12:13,13:14,14:1500000,1500000:16}
    ]

    const tableData = [
        {
            name: "Nick",
            used: 24,
            captured: "Bath",
            rate: 90,
            test1: 1,
            test2: 2,
            test3: 3,
            test4: 4
        },
        {
            name: "Jack",
            used: 26,
            captured: "Bristol asdfasdfasd",
            rate: 80,
            test1: 1,
            test2: 2,
            test3: 3,
            test4: 4
        },
        {
            name: "Connor",
            used: 26,
            captured: "Bristol",
            rate: 70,
            test1: 1,
            test2: 2,
            test3: 3,
            test4: 4
        },
        {
            name: "Nick1",
            used: 24,
            captured: "Bath",
            rate: 90,
            test1: 1,
            test2: 2,
            test3: 3,
            test4: 4
        },
        {
            name: "Jack1",
            used: 26,
            captured: "Bristol",
            rate: 80,
            test1: 1,
            test2: 2,
            test3: 3,
            test4: 4
        },
        {
            name: "Connor1",
            used: 26,
            captured: "Bristol",
            rate: 70,
            test1: 1,
            test2: 2,
            test3: 3,
            test4: 4
        },
        {
            name: "Nick2",
            used: 24,
            captured: "Bath",
            rate: 90,
            test1: 1,
            test2: 2,
            test3: 3,
            test4: 4
        },
        {
            name: "Jack2",
            used: 26,
            captured: "Bristol",
            rate: 80,
            test1: 1,
            test2: 2,
            test3: 3,
            test4: 4
        },
        {
            name: "Connor2",
            used: 26,
            captured: "Bristol",
            rate: 70,
            test1: 1,
            test2: 2,
            test3: 3,
            test4: 4
        },
    ];

    return (
        <>
            <Head>
                <title>Create T3 App</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/Portal_Icon.png" />
            </Head>
            <div className="fixed bg-secondarygrey w-full h-full -z-10"></div>
            <div className="grid grid-cols-[auto_1fr]">
                <Sidebar />
                {/* <div className="fixed">
                        <div className="flex flex-col bg-secondaryblack w-screen h-screen p-4"></div>
                    </div> */}
                <div className="w-36"></div> {/* So that the main content lines up with the sidebar */}
                <main className="relative w-full bg-secondarygrey">
                    <header className="grid grid-cols-[auto_1fr] grid-rows-1 bg-white shadow-md px-8 py-4">
                        <div>
                            <h5 className="text-2xl">[Client Name] Products</h5>
                            <h6>Portal / Products / Overview</h6>
                        </div>
                        <div className="flex gap-16 place-self-center">
                            <h6>Overview</h6>
                            <h6>Deliveries</h6>
                            <h6>Stock Checks</h6>
                        </div>
                    </header>
                    <div className="absolute flex justify-between p-5 rounded-2xl bg-gradient-to-br from-primary to-tertiary inset-x-8">

                        <HeaderButton>
                            <div className="flex flex-wrap items-center text-lg select-none cursor-pointer" onClick={() => { handleLayoutChange() }}>
                                <p className="pr-4">
                                    Change View Style
                                </p>
                                <img className={(layout != "grid" ? "opacity-30 pl-5 scale-75" : "pl-5 scale-75")} src="/grid-four.svg" />
                                <img className={(layout != "table" ? "opacity-30 scale-75" : "scale-75")} src="/list.svg" />
                            </div>
                        </HeaderButton>
                        <HeaderButton>
                            <div className="flex flex-wrap items-center text-lg select-none cursor-pointer">
                                <p className="pr-4">
                                    Add Product
                                </p>
                                <img className="pl-1 scale-75" src="/add-three.svg" />
                            </div>
                        </HeaderButton>
                        <HeaderButton>
                            <div className="flex items-center">
                                <p className="pr-4">
                                    Sort By: {/*sorted*/}
                                </p>
                                <img className="pl-1 scale-75" src="/sort-one.svg" />
                            </div>
                        </HeaderButton>
                        <HeaderButton>
                            <div className="flex items-center">
                                <p className="pr-4">
                                    Download CSV
                                </p>
                                <img className="pl-1 scale-75" src="/download.svg" />
                            </div>
                        </HeaderButton>
                    </div>
                    <div className="p-8 mt-20">
                        <SortableTable data={tableData} layout={layout} onLayoutChange={setLayout} />
                        <SortableTable data={tableData2} layout={layout} onLayoutChange={setLayout} />
                        <DropdownMenu label="Favorite Color">
                            <Item>Red</Item>
                            <Item>Orange</Item>
                            <Item>Yellow</Item>
                            <Item>Green</Item>
                            <Item>Blue</Item>
                            <Item>Purple</Item>
                            <Item>Black</Item>
                            <Item>White</Item>
                            <Item>Lime</Item>
                            <Item>Fushsia</Item>
                        </DropdownMenu>
                        <AreaChart data={[10, 11, 9, 12, 8, 13]} width={300} height={150} />
                        <div className="p-4 bg-white w-fit mt-8">
                            <ScatterGraph data={[
                                { x: 0, y: 20, label: 'A' },
                                { x: 40, y: 50, label: 'B' },
                                { x: 30, y: 70, label: 'C' },
                                { x: 60, y: 80, label: 'D' },
                                { x: 90, y: 10, label: 'E' }
                            ]} width={300} height={150} />
                        </div>
                        <LineGraph data={[10, 11, 9, 12, 8, 13]} width={500} height={500} />

                        <div className="w-[250px] h-[250px] flex place-content-center bg-white rounded-2xl mt-8">
                            <DonutProgress data={90} duration={750} colour="#49cc73" backgroundColour="#ececec" size={250} />
                        </div>
                        <DonutProgress data={90} duration={750} colour="#49cc73" backgroundColour="#ececec" size={500} />
                        <DonutProgress data={90} duration={750} colour="#49cc73" backgroundColour="#ececec" size={50} />
                        <DonutProgress data={90} duration={750} colour="#49cc73" backgroundColour="#ececec" size={1000} />
                        {/* <div className="w-[250px] h-[250px]">
                            <svg viewBox="0 0 100 100">

                                <clipPath id="clip">
                                    <path d="M 50 0 a 50 50 0 0 1 0 100 50 50 0 0 1 0 -100 v 8 a 42 42 0 0 0 0 84 42 42 0 0 0 0 -84" />
                                </clipPath>

                                <foreignObject x="0" y="0" width="100" height="100" clip-path="url(#clip)">
                                    <div className="gradient" />
                                </foreignObject>
                            </svg>
                        </div> */}
                        {/* <div className="w-[100px]">
                            <AnimatedProgressProvider
                                valueStart={0}
                                valueEnd={66}
                                duration={1.4}
                                easingFunction={easeQuadInOut}
                                repeat
                            >
                                {value => {
                                    const roundedValue = Math.round(value);
                                    return (
                                        <CircularProgressbar
                                            value={value}
                                            text={`${roundedValue}%`}
                                        

                                        />
                                    );
                                }}
                            </AnimatedProgressProvider>
                            <CircularProgressbar value={60} text={`${60}%`} />
                        </div> */}
                    </div>
                    <div>
                        {/* <DonutProgress data={100} colour="#49cc73" backgroundColour="#D0D0D0" /> */}
                    </div>
                </main>
            </div>
        </>
    )
}

export default Test